basePath: /api
definitions:
  main.Chirp:
    properties:
      author_name:
        type: string
      body:
        type: string
      created_at:
        type: string
      expiration_datetime:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  main.ChirpDataCreate:
    properties:
      body:
        example: My super chirp!
        type: string
      expiration_datetime:
        example: "2023-12-31T23:59:59Z"
        type: string
    type: object
  main.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  main.RespondDataChangeName:
    properties:
      UpdatedAt:
        type: string
      user_name:
        type: string
    type: object
  main.RespondDataUserChange:
    properties:
      UpdatedAt:
        type: string
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  main.ReturnDataCreateUser:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
    type: object
  main.ReturnDataLogin:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      refresh_token:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  main.ReturnUserData:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_chirpy_red:
        type: boolean
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  main.UserDataChange:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  main.UserDataChangeName:
    properties:
      user_name:
        type: string
    type: object
  main.UserDataCreate:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  main.UserDataLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: chirpy.bieda.it
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple social media API for posting chirps.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Chirpy API
  version: "1.0"
paths:
  /chirps:
    get:
      consumes:
      - application/json
      description: Retrieves all chirps in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Chirp'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all chirps
      tags:
      - chirps
    post:
      consumes:
      - application/json
      description: Creates a new chirp for the authenticated user. The chirp body
        must be less than 140 characters and cannot contain certain bad words.
      parameters:
      - description: Chirp object
        in: body
        name: chirp
        required: true
        schema:
          $ref: '#/definitions/main.ChirpDataCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Chirp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new chirp
      tags:
      - chirps
  /chirps/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the chirp with the given UUID
      parameters:
      - description: Chirp ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete the given chirp
      tags:
      - chirps
    get:
      consumes:
      - application/json
      description: Retrieves a specific chirp by its ID
      parameters:
      - description: Chirp ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Chirp'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific chirp
      tags:
      - chirps
  /healthz:
    get:
      description: Returns 200 OK if the server is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - health
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.UserDataLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ReturnDataLogin'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: User login
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ReturnUserData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh access token
      tags:
      - auth
  /revoke:
    post:
      consumes:
      - application/json
      description: Revokes the current refresh token, logging out the user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke refresh token
      tags:
      - auth
  /user/chirps:
    get:
      consumes:
      - application/json
      description: Retrieves all chirps created by the authenticated user
      parameters:
      - description: filter=expired to filter by expired chirps
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Chirp'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get chirps for the currently authenticated user
      tags:
      - chirps
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ReturnUserData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user data
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's email, password, and name
      parameters:
      - description: User data to update
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/main.UserDataChangeName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RespondDataChangeName'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user name data
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user account with email, password and name
      parameters:
      - description: User registration data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/main.UserDataCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.ReturnDataCreateUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Create new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the authenticated user's email, name, and password
      parameters:
      - description: User data to update
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/main.UserDataChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RespondDataUserChange'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user data
      tags:
      - users
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations about chirps
  name: chirps
- description: Authentication endpoints
  name: auth
- description: User management endpoints
  name: users
