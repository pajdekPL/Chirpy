// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"
	"log"
	"github.com/google/uuid"
)

const changeUserData = `-- name: ChangeUserData :one
UPDATE users
SET email = $2, hashed_password = $3, user_name = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red, user_name
`

type ChangeUserDataParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	UserName       string
}

func (q *Queries) ChangeUserData(ctx context.Context, arg ChangeUserDataParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeUserData,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.UserName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
		&i.UserName,
	)
	return i, err
}

const changeUserName = `-- name: ChangeUserName :one
UPDATE users
SET user_name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red, user_name
`

type ChangeUserNameParams struct {
	ID       uuid.UUID
	UserName string
}

func (q *Queries) ChangeUserName(ctx context.Context, arg ChangeUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeUserName, arg.ID, arg.UserName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
		&i.UserName,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password, user_name)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red, user_name
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	UserName       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	var currentUser string
	err := q.db.QueryRowContext(ctx, "SELECT current_user").Scan(&currentUser)
	if err != nil {
		log.Fatalf("Failed to check current DB user: %v", err)
	}
	log.Printf("Current DB user: %s", currentUser)
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.UserName)
	var i User
	err = row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
		&i.UserName,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
	IsChirpyRed    bool
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, user_name, hashed_password, is_chirpy_red FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	UserName       string
	HashedPassword string
	IsChirpyRed    bool
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserName,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUserToRed = `-- name: UpgradeUserToRed :one
UPDATE users
SET is_chirpy_red = TRUE, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red, user_name
`

func (q *Queries) UpgradeUserToRed(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, upgradeUserToRed, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
		&i.UserName,
	)
	return i, err
}
