// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id, expiration_datetime)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3
)
RETURNING id, created_at, updated_at, body, user_id, expiration_datetime
`

type CreateChirpParams struct {
	Body               string
	UserID             uuid.UUID
	ExpirationDatetime time.Time
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID, arg.ExpirationDatetime)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
		&i.ExpirationDatetime,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE FROM chirps
WHERE id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, id)
	return err
}

const getChirp = `-- name: GetChirp :one
SELECT id, created_at, updated_at, body, user_id, expiration_datetime FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
		&i.ExpirationDatetime,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT c.id, c.created_at, c.updated_at, c.body, c.user_id, c.expiration_datetime, u.user_name as author_name
FROM chirps c
JOIN users u ON c.user_id = u.id
WHERE c.expiration_datetime > NOW()
ORDER BY c.created_at ASC
`

type GetChirpsRow struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Body               string
	UserID             uuid.UUID
	ExpirationDatetime time.Time
	AuthorName         string
}

func (q *Queries) GetChirps(ctx context.Context) ([]GetChirpsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChirpsRow
	for rows.Next() {
		var i GetChirpsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.ExpirationDatetime,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsByUser = `-- name: GetChirpsByUser :many
SELECT c.id, c.created_at, c.updated_at, c.body, c.user_id, c.expiration_datetime, u.user_name as author_name
FROM chirps c
JOIN users u ON c.user_id = u.id
WHERE c.user_id = $1 AND c.expiration_datetime > NOW()
ORDER BY c.created_at ASC
`

type GetChirpsByUserRow struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Body               string
	UserID             uuid.UUID
	ExpirationDatetime time.Time
	AuthorName         string
}

func (q *Queries) GetChirpsByUser(ctx context.Context, userID uuid.UUID) ([]GetChirpsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChirpsByUserRow
	for rows.Next() {
		var i GetChirpsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.ExpirationDatetime,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredChirps = `-- name: GetExpiredChirps :many
SELECT c.id, c.created_at, c.updated_at, c.body, c.user_id, c.expiration_datetime, u.user_name as author_name
FROM chirps c
JOIN users u ON c.user_id = u.id
WHERE c.expiration_datetime < NOW()
ORDER BY c.created_at ASC
`

type GetExpiredChirpsRow struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Body               string
	UserID             uuid.UUID
	ExpirationDatetime time.Time
	AuthorName         string
}

func (q *Queries) GetExpiredChirps(ctx context.Context) ([]GetExpiredChirpsRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiredChirpsRow
	for rows.Next() {
		var i GetExpiredChirpsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.ExpirationDatetime,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredChirpsByUser = `-- name: GetExpiredChirpsByUser :many
SELECT c.id, c.created_at, c.updated_at, c.body, c.user_id, c.expiration_datetime, u.user_name as author_name
FROM chirps c
JOIN users u ON c.user_id = u.id
WHERE c.user_id = $1 AND c.expiration_datetime < NOW()
ORDER BY c.created_at ASC
`

type GetExpiredChirpsByUserRow struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Body               string
	UserID             uuid.UUID
	ExpirationDatetime time.Time
	AuthorName         string
}

func (q *Queries) GetExpiredChirpsByUser(ctx context.Context, userID uuid.UUID) ([]GetExpiredChirpsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredChirpsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiredChirpsByUserRow
	for rows.Next() {
		var i GetExpiredChirpsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.ExpirationDatetime,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
